print("No")
}
test_expression = TRUE
if (test_expression){
print("Yes")
} else {
print("No")
}
test_expression = TRUE
if (test_expression){
print("Yes")
} else {
print("No")
}
install.packages("igraph")
install.packages("sna")
plot(a)
plot(doe)
library(data.table)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(rpart)
library(randomForest)
library(stepPlr)
library(C50)
library(plyr)
library(MASS)
library(caret)
library(caretEnsemble)
library(dplyr)
library(plotly)
# make subplots
p <- subplot(
# histogram (counts) of gear
plot_ly(d, x = ~factor(gear)) %>%
add_histogram(color = I("grey50")),
# scatterplot of disp vs mpg
scatterplot,
titleX = T
)
# define a shared data object
d <- SharedData$new(mtcars)
g <- ggplot(txhousing, aes(x = date, y = sales, group = city)) +
geom_line(alpha = 0.4)
g
ggplotly(g, tooltip = c("city"))
g <- txhousing %>%
# group by city
group_by(city) %>%
# initiate a plotly object with date on x and median on y
plot_ly(x = ~date, y = ~median) %>%
# add a line plot for all texan cities
add_lines(name = "Texan Cities", hoverinfo = "none",
type = "scatter", mode = "lines",
line = list(color = 'rgba(192,192,192,0.4)')) %>%
# plot separate lines for Dallas and Houston
add_lines(name = "Houston",
data = filter(txhousing,
city %in% c("Dallas", "Houston")),
hoverinfo = "city",
line = list(color = c("red", "blue")),
color = ~city)
g
library(crosstalk)
# define a shared data object
d <- SharedData$new(mtcars)
# make a scatterplot of disp vs mpg
scatterplot <- plot_ly(d, x = ~mpg, y = ~disp) %>%
add_markers(color = I("navy"))
# define two subplots: boxplot and scatterplot
subplot(
# boxplot of disp
plot_ly(d, y = ~disp) %>%
add_boxplot(name = "overall",
color = I("navy")),
# scatterplot of disp vs mpg
scatterplot,
shareY = TRUE, titleX = T) %>%
layout(dragmode = "select")
# make subplots
p <- subplot(
# histogram (counts) of gear
plot_ly(d, x = ~factor(gear)) %>%
add_histogram(color = I("grey50")),
# scatterplot of disp vs mpg
scatterplot,
titleX = T
)
layout(p, barmode = "overlay")
library(networkD3)
data(MisLinks, MisNodes)
head(MisLinks, 3)
head(MisNodes, 3)
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.9, Nodesize = 3,
linkDistance = 100, fontSize = 20)
# Scatterplot
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="loess", se=F) +
xlim(c(0, 0.1)) +
ylim(c(0, 500000)) +
labs(subtitle="Area Vs Population",
y="Population",
x="Area",
title="Scatterplot",
caption = "Source: midwest")
plot(gg)
install.packages("cowplot")  # a gganimate dependency
install.packages("devtools")
devtools::install_github("https://github.com/thomasp85/gganimate/releases/tag/v0.1.1")
install.packages("gapminder")
library(ggplot2)
library(gganimate)
library(gapminder)
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
gganimate(g, interval=0.2)
NYC.data.female.single <- NYC.data.female.maritalstatus$`0`
setwd("~/Desktop/Data Science/BigData /Project2BigData")
# Install packages
install.packages("readxl")
install.packages("dplyr")
install.packages("psych")
NYC
setwd("~/Desktop/Data Science/BigData /Project2BigData")
# Install packages
install.packages("readxl")
install.packages("dplyr")
install.packages("psych")
# Load libraries
library(readxl)
library(dplyr)
library(psych)
library(ggplot2)
library(base)
BlackFriday <- read_excel("BlackFriday.xlsx",col_names=TRUE)
# original data set
BlackFriday
# original data set
BlackFriday
# Summary
summary(BlackFriday)
# Describe
describe(BlackFriday)
# Copy data to a working variable
BlackFridayClean <- BlackFriday
# Removing missing data
BlackFridayClean <- na.omit(BlackFridayClean)
# View BlackFridayClean
BlackFridayClean
colnames(BlackFridayClean)
bf <- BlackFridayClean
colnames(bf)
bf$City_Category[bf$City_Category=="A"] <- "DC"
bf$City_Category[bf$City_Category=="B"] <- "NYC"
bf$City_Category[bf$City_Category=="C"] <- "Chicago"
bf
library(data.table)
library(gridExtra)
library(corrplot)
library(rpart)
library(randomForest)
library(stepPlr)
library(C50)
library(plyr)
library(MASS)
library(caret)
library(caretEnsemble)
bf
bf$City_Category[bf$City_Category=="A"] <- "DC"
bf$City_Category[bf$City_Category=="B"] <- "NYC"
bf$City_Category[bf$City_Category=="C"] <- "Chicago"
bf
BlackFriday <- read.csv("BlackFriday.csv",stringsAsFactors = FALSE, header = TRUE, na.strings = c ('NA',''))
BlackFriday <- read_excel("BlackFriday.xlsx",col_names=TRUE)
BlackFriday1 <- read.csv("BlackFriday.csv",stringsAsFactors = FALSE, header = TRUE, na.strings = c ('NA',''))
BlackFriday1
BlackFriday1 <- na.omit(BlackFriday1)
BlackFriday1
# original data set
BlackFriday
BlackFrdiay <- na.omit(BlackFriday)
BlackFriday1
BlackFriday <- na.omit(BlackFriday)
# original data set
BlackFriday
BlackFriday1
USArrests
summary(USArrests)
describe(USArrests)
df <- USArrests
df <- na.omit(df)
df[1:10,]
df <- scale(df)
df[1:10,]
BlackFriday1
bfScaled <- scale(BlackFriday1)
cities <- split(bf,bf$City_Category)
k2 <- kmeans(df,centers=2,nstart=25)
str(k2)
k2
k3 <- kmeans(df,centers=3,nstart=25)
k3
wssplot <- function(data,nc=15,seed=1234)
{
wss <- (nrow(data)-2)*sum(apply(data,2,var))
for(i in 2:nc)
{
set.seed(seed)
wss[i] <- sum(kmeans(data,centers=i)$withinss)
}
plot(1:nc, wss, type="b",
xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wssplot
wssplot(USArrests)
wassplot(df,nc=4,seed=1234)
wssplot(df,nc=4,seed=1234)
# Psycch:: Cluster Analysis
iclust(mtcars,nclusters=2)
mtcars
iclust(mtcars,nfactors=4)
iclust(mtcars,nclusters=4)
plot(USArrests)
clusplot(pam(x=mt.f,k=3,metric="euclidean",stand=FALSE))
clusplot(pam(x=mt.df,k=3,metric="euclidean",stand=FALSE))
install.packages("cluster")
library(cluster)
clusplot(pam(x=mt.df,k=3,metric="euclidean",stand=FALSE))
clusplot(pam(x=mtcars.df,k=3,metric="euclidean",stand=FALSE))
clusplot(pam(x=mtcars,k=3,metric="euclidean",stand=FALSE))
b2 <- principal(breast.noclass,nfactors=2,rotate="none")
b2 <- principal(mtcars,nfactors=2,rotate="none")
b2
b2 <- principal(df,nfactors=2,rotate="none")
b2
b3 <- principal(df,nfactors=2,rotate="none")
b3
# Scree Plot: Getting an idea of components
usascree<-scree(USArrests,factors=TRUE)
usascree
bf
rows(bf)
rownames(bf)
colnames(bf)
colnames(bf)
bf$Stay_In_Current_City_Years
bf[1:10,]$Stay_In_Current_City_Years
bf[1:100,]$Stay_In_Current_City_Years
bf[1:100]
bf[1:100,]
# bf
colnames(bf)
bf[,1]
uids <- bf[,1]
bf[,2]
pids <- bf[,2]
bf[,3]
gender <- bf[,3]
bf[,4]
age <- bf[,4]
bf[,5]
occupation <- bf[,5]
bf[,6]
city_category <- bf[,6]
bf[,7]
occupations <- bf[,5]
cities <- bf[,6]
bf[,7]
yearsStayed <- bf[,7]
bf[,8]
bf[,8]
bf[,8]
maritalStatus <- bf[,8]
bf[,9]
prod1 <- bf[,9]
prod1
bf[,10]
bf[,11]
prod1 <- bf[,9]
prod2 <- bf[,10]
prod3 <- bf[,11]
bf[,12]
purchases <- bf[,12]
avg()
mean()
mean(purchases)
purchases
purchases <- na.omit(purchases)
purchases
mean(purchases)
mean(purchases[0:nrows(purchases),])
mean(purchases[0:numrows(purchases),])
purchases
summary(purchases)
summary(bf)
colnames(bf)
# User_ID
# Which user made the biggest purchase and how much was it?
usersVsPurchase <- select(bf,User_ID,Purchase)
colnames(bf)
# User_ID
# Which user made the biggest purchase and how much was it?
usersVsPurchase <- select(bf,"User_ID","Purchase")
# User_ID
# Which user made the biggest purchase and how much was it?
usersVsPurchase <- select(bf,bf[,1],bf[,12])
BlackFriday1 <- read.csv("BlackFriday.csv",stringsAsFactors = FALSE, header = TRUE, na.strings = c ('NA',''),col_names=TRUE)
BlackFriday1 <- read.csv("BlackFriday.csv",stringsAsFactors = FALSE, header = TRUE, na.strings = c ('NA',''),col_names=c("User_ID","Product_ID","Gender","Age","Occupation","City_Category","Stay_In_Current_City_Years","Marital_Status","Product_Category_1","Product_Category_2","Product_Category_3","Purchase"))
BlackFriday1 <- read.csv("BlackFriday.csv",stringsAsFactors = FALSE, header = TRUE, na.strings = c ('NA',''),col_names=c("User_ID","Product_ID","Gender","Age","Occupation","City_Category","Stay_In_Current_City_Years","Marital_Status","Product_Category_1","Product_Category_2","Product_Category_3","Purchase")))
BlackFriday1 <- read.csv("BlackFriday.csv",stringsAsFactors = FALSE, header = TRUE, na.strings = c ('NA',''),col_names= c("User_ID","Product_ID","Gender","Age","Occupation","City_Category","Stay_In_Current_City_Years","Marital_Status","Product_Category_1","Product_Category_2","Product_Category_3","Purchase"))
BlackFriday1 <- read.csv("BlackFriday.csv",stringsAsFactors = FALSE, header = TRUE, na.strings = c ('NA',''))
names(BlackFriday1) <- c("User_ID","Product_ID","Gender","Age","Occupation","City_Category","Stay_In_Current_City_Years","Marital_Status","Product_Category_1","Product_Category_2","Product_Category_3","Purchase"))
names(BlackFriday1) <- c("User_ID","Product_ID","Gender","Age","Occupation","City_Category","Stay_In_Current_City_Years","Marital_Status","Product_Category_1","Product_Category_2","Product_Category_3","Purchase")
BlackFridat1
BlackFriday1
BlackFriday <- read.csv("BlackFriday.csv",stringsAsFactors = FALSE, header = TRUE, na.strings = c ('NA',''))
names(BlackFriday) <- c("User_ID","Product_ID","Gender","Age","Occupation","City_Category","Stay_In_Current_City_Years","Marital_Status","Product_Category_1","Product_Category_2","Product_Category_3","Purchase")
BlackFriday
# original data set
BlackFriday
BlackFriday <- na.omit(BlackFriday)
# Summary
summary(BlackFriday)
# Describe
describe(BlackFriday)
# Copy data to a working variable
BlackFridayClean <- BlackFriday
# Removing missing data
BlackFridayClean <- na.omit(BlackFridayClean)
# View BlackFridayClean
BlackFridayClean
colnames(BlackFridayClean)
bf <- BlackFridayClean
colnames(bf)
colnames(bf)
uids <- bf[,1]
pids <- bf[,2]
gender <- bf[,3]
age <- bf[,4]
occupations <- bf[,5]
cities <- bf[,6]
yearsStayed <- bf[,7]
maritalStatus <- bf[,8]
prod1 <- bf[,9]
prod2 <- bf[,10]
prod3 <- bf[,11]
purchases <- bf[,12]
mean(purchases)
purchases <- na.omit(purchases)
purchases
summary(purchases)
summary(bf)
colnames(bf)
# User_ID
# Which user made the biggest purchase and how much was it?
uidVsPurchase <- select(bf,User_ID,Purchase)
# User_ID
# Which user made the biggest purchase and how much was it?
uidVsPurchase <- select(bf,"User_ID","Purchase")
bf.data <- select(bf,User_ID,Gender,Age,Occupation,Purchase,Marital_Status)
bf
# User_ID
# Which user made the biggest purchase and how much was it?
uidVsPurchase <- dplyr::select(bf,"User_ID","Purchase")
uidVsPurchase
uidVsPurchaseMax <- function(uidVsPurchase) sapply(uidVsPurchase,max,na.rm=TRUE)
uidVsPurchaseMax()
uidVsPurchaseMax
colMax <- function(data) sapply(data, max, na.rm = TRUE)
colSort <- function(data, ...) sapply(data, sort, ...)
uidVsPurchaseMax(uidPurchase)
uidVsPurchaseMax(uidVsPurchase)
uidVsPurchase
uidVsPurchaseMax(uidVsPurchase)
uidVsPurchaseMax(uidVsPurchase)
# Max purchase was 23959 by user 1006040
sortedPurchases <- colSort(uidVsPurchase)
sortedPurchases
sortedPurchases
sort
sapply()
help(sapply)
# Product_ID
# Which product ID had the greatest revenue and how much revenue did it generate?
pidVsRevenue <- dplyr::select(bf,"Product_ID","Purchase")
pidVsRevenue
uidVsPurchaseMax(uidVsPurchase)
colMax(uidVsPurchase)
colMax(sortedPurchases)
colMax(pidVsRevenue)
# Gender
# Which gender contributed more to the revenue and how much did they contribute?
genderVsRevenue <- dplyr::select(bf,"Gender","Purchase")
genderVsRevenue
colMax(genderVsRevenue)
genderVsRevenue <- split(genderVsRevenue,genderVsRevenue$Gender)
genderVsRevenue
colMax(genderVsRevenue$M)
colMax(genderVsRevenue$F)
sum(genderVsRevenue$M)
sum(genderVsRevenue$M$Purchase)
sum(genderVsRevnue$F$Purchase)
sum(genderVsRevenue$F$Purchase)
colnames(bf)
# Age
# Which age group contributed the most to the revenue and how much?
ageVsRevenue <- split(genderVsRevenue,genderVsRevenue$Age)
# Age
# Which age group contributed the most to the revenue and how much?
ageVsRevenue <- dplyr::select(bf,"Age","Purchase")
ageVsRevenue <- split(ageVsRevenue,ageVsRevenue$Age)
ageVsRevenue
sum(ageVsRevenue$`0-17`)
colnames(AgeVsRevenue)
ageVsRevenue
colnames(ageVsRevenue)
ageVsRevenue
summary(ageVsRevenue)
sum(ageVsRevenue$`36-45`)
sum(ageVsRevenue$`0-17`)
sum(ageVsRevenue$`0-17`$Purchase)
sum(ageVsRevenue$`18-25`$Purchase)
sum(ageVsRevenue$`26-35`$Purchase)
sum(ageVsRevenue$`36-45`$Purchase)
sum(ageVsRevenue$`51-55`$Purchase)
sum(ageVsRevenue$`55+`$Purchase)
ageVsRevenue <- c(sum(ageVsRevenue$`0-17`$Purchase),sum(ageVsRevenue$`18-25`$Purchase),sum(ageVsRevenue$`26-35`$Purchase),sum(ageVsRevenue$`36-45`$Purchase),sum(ageVsRevenue$`46-50`$Purchase),sum(ageVsRevenue$`51-55`$Purchase),sum(ageVsRevenue$`55+`$Purchase)
ageVsRevenue <- c(sum(ageVsRevenue$`0-17`$Purchase),sum(ageVsRevenue$`18-25`$Purchase),sum(ageVsRevenue$`26-35`$Purchase),sum(ageVsRevenue$`36-45`$Purchase),sum(ageVsRevenue$`46-50`$Purchase),sum(ageVsRevenue$`51-55`$Purchase),sum(ageVsRevenue$`55+`$Purchase))
ageVsRevenue <- c(sum(ageVsRevenue$`0-17`$Purchase),sum(ageVsRevenue$`18-25`$Purchase),sum(ageVsRevenue$`26-35`$Purchase),sum(ageVsRevenue$`36-45`$Purchase),sum(ageVsRevenue$`46-50`$Purchase),sum(ageVsRevenue$`51-55`$Purchase),sum(ageVsRevenue$`55+`$Purchase))
ageVsRevenue
name(ageVsRevenue) <- c("0-17","18-25","26-35","36-45","46-50","51-55","55+")
names(ageVsRevenue) <- c("0-17","18-25","26-35","36-45","46-50","51-55","55+")
ageVsRevenue
max(ageVsRevenue)
colSort(ageVsRevenue)
rowSort(ageVsRevenue)
max(ageVsRevenue)
ageVsRevenue[,1] <- c("0-17","18-25","26-35","36-45","46-50","51-55","55+")
ageVsRevenue[1,] <- c("0-17","18-25","26-35","36-45","46-50","51-55","55+")
ageVsRevenue[,1] <- c("0-17","18-25","26-35","36-45","46-50","51-55","55+")
ageVsRevenue <- c(sum(ageVsRevenue$`0-17`$Purchase),sum(ageVsRevenue$`18-25`$Purchase),sum(ageVsRevenue$`26-35`$Purchase),sum(ageVsRevenue$`36-45`$Purchase),sum(ageVsRevenue$`46-50`$Purchase),sum(ageVsRevenue$`51-55`$Purchase),sum(ageVsRevenue$`55+`$Purchase))
names(ageVsRevenue) <- c("0-17","18-25","26-35","36-45","46-50","51-55","55+")
max(ageVsRevenue)
auto_mpg <- read.table("auto-mpg.data")
mtcars
setwd("~/Desktop/Data Science/BigData /Project2BigData")
auto_mpg <- read.table("Auto.data")
Auto.data <- read.delim("~/Desktop/Data Science/BigData /Project2BigData/Auto.data.txt")
View(Auto.data)
auto_data <- Auto.data
auto_data
library(readr)
Auto_data <- read_csv("Auto.data.txt")
View(Auto_data)
auto_mpg <- Auto_data
auto_mpg
names(auto_mpg) <- c("mpg","cylinders","displacement","horsepower","weight","acceleration","year","origin","name")
autp
auto
psych::describe(USArrests,na.rm=TRUE)
describe(USArrests)
# Convert NAs to 0s
bf <- bf.omit(bf)
# Convert NAs to 0s
bf <- na.omit(bf)
bf
bf$Marital_Status[is.na(bf$Marital_Status)<-0]
# Min-Max Normalization
normalize <- function(x) {(((x-min(x))/max(x)-min(x)))}
normalize
normalize(bf)
zscore <- function(x) {(x-mean(x))/sd(x)}
zscore(c(10,20,30,40,50))
# K means purchases
purchases <- bf$Purchase
purchases.k3 <- kmeans(purchases,3)
purchases.k3
purchases.k3$totss
purchases.k3$centers
purchases.k3$iter
purchases.k4 <- kmeans(purchases,4)
purchases.k4
purchases.k4$totss
purchases.k4$centers
purchases.k4$iter
purchases.k5 <- kmeans(purchases,5)
purchases.k5
purchases.k5$totss
purchases.k5$centers
purchases.k5$iter
install.packages("gmodels")
?dist
#  Calculate Distances (Classical methods for distance measures are Euclidean and Manhattan Distances)
#   - Select a distance measure: Euclidean, Manhattan, Minkowski, and so on
dist(bf)
#  Calculate Distances (Classical methods for distance measures are Euclidean and Manhattan Distances)
#   - Select a distance measure: Euclidean, Manhattan, Minkowski, and so on
dist(bf[,1:10])
#  Calculate Distances (Classical methods for distance measures are Euclidean and Manhattan Distances)
#   - Select a distance measure: Euclidean, Manhattan, Minkowski, and so on
dist(bf[,1:10])
